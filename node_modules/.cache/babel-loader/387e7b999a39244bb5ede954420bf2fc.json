{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:8085'\n});\n\nconst registro = (path, data) => {\n  return api.post(path, data);\n};\n\nconst login = data => {\n  return {\n    'nome': 'gonsales',\n    'categoria': 'funcionario'\n  };\n  return api.get(`login/`);\n};\n/**\r\n * \r\n * Para\tefetuar\ta\tlocação,\to\tcliente\tdeverá ter\to\t\r\n * seu\tcadastro\tno\tsistema\taprovado\t\r\n * pelos\tcritérios estabelecidos\tpela\tempresa\r\n */\n\n\nconst verClientes = nomeEmpresa => {\n  return api.get(`clientes/${nomeEmpresa}`);\n};\n\nconst aprovarRegistro = (idCliente, aprovado) => {\n  return api.post('/aprovar', {\n    'id': idCliente,\n    'aprovado': aprovado\n  });\n};\n/**\r\n *  * A\tlocação será\r\n * ́ efetuada\tapenas\tse\to\tfuncionário\r\n * possuir\tas\tpermissões de\tacesso\tao\tsistema.\r\n */\n\n\nconst mostrarReservasPreAprovadas = nomeEmpresa => {\n  return api.get(`/reservasPreAprovadas/${nomeEmpresa}`);\n};\n\nconst mostrarTiposSeguro = nomeEmpresa => {\n  return api.get(`/seguros/${nomeEmpresa}`);\n};\n/**\t \r\n * Para\t realizar\t reservas,\t o\t\r\n * cliente\tdeverá fazer\tseu\tcadastro,\t\r\n * selecionar\tas\topções de\treserva,\ttipo\tde\tseguro\t\r\n * e\tperíodo de\tlocação.\r\n */\n\n\nconst reservarVeiculo = (path, data) => {\n  return api.post(path, data);\n};\n/**\r\n * para\trealizar\ta\tdevolução do\tveiculo,\to\tresponsável \r\n * deverá entregá-lo\tnas\tmesmas condições de\trecebimento,\tque\tserão\r\n * avaliadas\t por\t uma\t vistoria\t aprovada\t pela\t \r\n * empresa\t com\t o\t uso\t de\t um\t checklist\tfornecido\tpelo\tsistema\r\n */\n\n\nconst entregarVeiculo = data => {\n  return api.post('/entrega', data);\n};\n/**\r\n * Se\to\tveiculo não\testiver\tnas\tcondições esperadas,\tele\tserá \r\n * enviado\tpara\tmanutenção e\tos\tcustos\tserão acrescidos\tao\tvalor\t\r\n * final\tda\tlocação.\tO\tveiculo somente\tserá\r\n * disponibilizado\tnovamente\tpara\tlocação após o\tseu\tretorno\t\r\n * à empresa\te\tas\tinformações decorrentes\tde\tuso,\tcomo\r\n * uilometragem,\tdeverão ser\tatualizadas.\r\n */\n\n\nconst enviarParaManutencao = idVeiculo => {\n  return api.post('/entrega', {\n    'id': idVeiculo\n  });\n};\n\nconst VerVeiculosDisponiveis = async _ => {\n  // return [\n  //     { 'nome': 'ford ka', 'disponibilidade': true, 'valor': 'R$ 100.00', 'categoria': 'Familiar' },\n  // ]\n  return await [{\n    'veiculo': 'ford fiesta',\n    'disponibilidade': true,\n    'valor': 100,\n    'categoria': 'passeio'\n  }];\n  return api.get('/veiculos');\n};\n\n_c = VerVeiculosDisponiveis;\n\nconst getReservadoPorCliente = idCliente => {\n  return api.get(`reservas/cliente/${idCliente}`);\n};\n\nconst getVeiculosPorEmpresa = idEmpresa => {\n  return api.get(`empresa/veiculos/${idEmpresa}`);\n};\n\nconst getReservas = idEmpresa => {\n  return api.get(`reservas/cliente/${idEmpresa}`);\n};\n\nconst verLocacoes = nomeEmpresa => {\n  return api.get(`locacoes/${nomeEmpresa}`);\n};\n\nconst verReservas = nomeEmpresa => {\n  return api.get(`reservas/${nomeEmpresa}`);\n};\n\nconst verVeiculosNaManutencao = nomeEmpresa => {\n  return api.get(`manutencao_veiculos/${nomeEmpresa}`);\n};\n\nconst verFuncionarios = nomeEmpresa => {\n  return api.get(`funcionarios/${nomeEmpresa}`);\n};\n\nconst pagarFuncionario = (idFuncionario, salario) => {\n  return api.post(`pagar_funcionario/${idFuncionario}`, {\n    'pagamento': salario\n  });\n};\n\nconst documentosLocacao = (tipo_documento, data) => {\n  return api.get(`doc_locacao/${tipo_documento}`);\n};\n\nexport default {\n  registro,\n  login,\n  mostrarTiposSeguro,\n  VerVeiculosDisponiveis,\n  reservarVeiculo,\n  getReservadoPorCliente,\n  getVeiculosPorEmpresa,\n  getReservas,\n  verClientes,\n  mostrarReservasPreAprovadas,\n  aprovarRegistro,\n  entregarVeiculo,\n  enviarParaManutencao\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"VerVeiculosDisponiveis\");","map":{"version":3,"sources":["C:/Users/megam/Desktop/Veiculos-PWEB/src/services/apiService.js"],"names":["axios","api","create","baseURL","registro","path","data","post","login","get","verClientes","nomeEmpresa","aprovarRegistro","idCliente","aprovado","mostrarReservasPreAprovadas","mostrarTiposSeguro","reservarVeiculo","entregarVeiculo","enviarParaManutencao","idVeiculo","VerVeiculosDisponiveis","_","getReservadoPorCliente","getVeiculosPorEmpresa","idEmpresa","getReservas","verLocacoes","verReservas","verVeiculosNaManutencao","verFuncionarios","pagarFuncionario","idFuncionario","salario","documentosLocacao","tipo_documento"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:8085'\r\n})\r\n\r\nconst registro = (path, data) => {\r\n    return api.post(path, data)\r\n}\r\n\r\nconst login = (data) => {\r\n    return {\r\n        'nome': 'gonsales',\r\n        'categoria': 'funcionario'\r\n    }\r\n    return api.get(`login/`)\r\n}\r\n\r\n/**\r\n * \r\n * Para\tefetuar\ta\tlocação,\to\tcliente\tdeverá ter\to\t\r\n * seu\tcadastro\tno\tsistema\taprovado\t\r\n * pelos\tcritérios estabelecidos\tpela\tempresa\r\n */\r\nconst verClientes = nomeEmpresa => {\r\n    return api.get(`clientes/${nomeEmpresa}`)\r\n}\r\n\r\nconst aprovarRegistro = (idCliente, aprovado) => {\r\n    return api.post('/aprovar', {\r\n        'id': idCliente,\r\n        'aprovado': aprovado\r\n    })\r\n}\r\n\r\n/**\r\n *  * A\tlocação será\r\n * ́ efetuada\tapenas\tse\to\tfuncionário\r\n * possuir\tas\tpermissões de\tacesso\tao\tsistema.\r\n */\r\nconst mostrarReservasPreAprovadas = nomeEmpresa => {\r\n    return api.get(`/reservasPreAprovadas/${nomeEmpresa}`)\r\n}\r\n\r\nconst mostrarTiposSeguro = nomeEmpresa => {\r\n    return api.get(`/seguros/${nomeEmpresa}`)\r\n}\r\n\r\n/**\t \r\n * Para\t realizar\t reservas,\t o\t\r\n * cliente\tdeverá fazer\tseu\tcadastro,\t\r\n * selecionar\tas\topções de\treserva,\ttipo\tde\tseguro\t\r\n * e\tperíodo de\tlocação.\r\n */\r\nconst reservarVeiculo = (path, data) => {\r\n    return api.post(path, data)\r\n}\r\n\r\n/**\r\n * para\trealizar\ta\tdevolução do\tveiculo,\to\tresponsável \r\n * deverá entregá-lo\tnas\tmesmas condições de\trecebimento,\tque\tserão\r\n * avaliadas\t por\t uma\t vistoria\t aprovada\t pela\t \r\n * empresa\t com\t o\t uso\t de\t um\t checklist\tfornecido\tpelo\tsistema\r\n */\r\nconst entregarVeiculo = data => {\r\n    return api.post('/entrega', data)\r\n}\r\n\r\n\r\n/**\r\n * Se\to\tveiculo não\testiver\tnas\tcondições esperadas,\tele\tserá \r\n * enviado\tpara\tmanutenção e\tos\tcustos\tserão acrescidos\tao\tvalor\t\r\n * final\tda\tlocação.\tO\tveiculo somente\tserá\r\n * disponibilizado\tnovamente\tpara\tlocação após o\tseu\tretorno\t\r\n * à empresa\te\tas\tinformações decorrentes\tde\tuso,\tcomo\r\n * uilometragem,\tdeverão ser\tatualizadas.\r\n */\r\nconst enviarParaManutencao = idVeiculo => {\r\n    return api.post('/entrega', { 'id': idVeiculo })\r\n}\r\n\r\nconst VerVeiculosDisponiveis = async _ => {\r\n    // return [\r\n    //     { 'nome': 'ford ka', 'disponibilidade': true, 'valor': 'R$ 100.00', 'categoria': 'Familiar' },\r\n    // ]\r\n    return await [{ 'veiculo': 'ford fiesta', 'disponibilidade': true, 'valor': 100, 'categoria': 'passeio' }]\r\n    return api.get('/veiculos')\r\n}\r\n\r\nconst getReservadoPorCliente = idCliente => {\r\n    return api.get(`reservas/cliente/${idCliente}`)\r\n}\r\n\r\nconst getVeiculosPorEmpresa = idEmpresa => {\r\n    return api.get(`empresa/veiculos/${idEmpresa}`)\r\n}\r\n\r\nconst getReservas = idEmpresa => {\r\n    return api.get(`reservas/cliente/${idEmpresa}`)\r\n}\r\n\r\nconst verLocacoes = nomeEmpresa => {\r\n    return api.get(`locacoes/${nomeEmpresa}`)\r\n}\r\n\r\nconst verReservas = nomeEmpresa => {\r\n    return api.get(`reservas/${nomeEmpresa}`)\r\n}\r\n\r\nconst verVeiculosNaManutencao = nomeEmpresa => {\r\n    return api.get(`manutencao_veiculos/${nomeEmpresa}`)\r\n}\r\n\r\nconst verFuncionarios = nomeEmpresa => {\r\n    return api.get(`funcionarios/${nomeEmpresa}`)\r\n}\r\n\r\nconst pagarFuncionario = (idFuncionario, salario) => {\r\n    return api.post(`pagar_funcionario/${idFuncionario}`, {\r\n        'pagamento': salario\r\n    })\r\n}\r\n\r\nconst documentosLocacao = (tipo_documento, data) => {\r\n    return api.get(`doc_locacao/${tipo_documento}`)\r\n}\r\n\r\nexport default {\r\n    registro,\r\n    login,\r\n    mostrarTiposSeguro,\r\n    VerVeiculosDisponiveis,\r\n    reservarVeiculo,\r\n    getReservadoPorCliente,\r\n    getVeiculosPorEmpresa,\r\n    getReservas,\r\n    verClientes,\r\n    mostrarReservasPreAprovadas,\r\n    aprovarRegistro,\r\n    entregarVeiculo,\r\n    enviarParaManutencao\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}