{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:8000'\n});\n\nconst registro = async (path, data) => {\n  return api.post(path, data);\n};\n\nconst login = async data => {\n  let user = {};\n  return api.get('/usuarios').then(response => {\n    if (response.status == 200) {\n      response.data.forEach(item => {\n        if (item['email'] == data['email'] && item['password'] == data['password']) user = item;\n      });\n    }\n  }).catch(_ => {\n    alert('falha');\n  });\n};\n/**\r\n * \r\n * Para\tefetuar\ta\tlocação,\to\tcliente\tdeverá ter\to\t\r\n * seu\tcadastro\tno\tsistema\taprovado\t\r\n * pelos\tcritérios estabelecidos\tpela\tempresa\r\n */\n\n\nconst verClientes = async nomeEmpresa => {\n  return api.get(`clientes/${nomeEmpresa}`);\n};\n\nconst aprovarRegistro = (idCliente, aprovado) => {\n  return api.post('/aprovar', {\n    'id': idCliente,\n    'aprovado': aprovado\n  });\n};\n\nconst aprovarReserva = (idReserva, status) => {\n  return api.post('/aprovarReserva', {\n    'id': idReserva,\n    'status': status\n  });\n};\n/**\r\n *  * A\tlocação será\r\n * ́ efetuada\tapenas\tse\to\tfuncionário\r\n * possuir\tas\tpermissões de\tacesso\tao\tsistema.\r\n */\n\n\nconst mostrarReservasPreAprovadas = nomeEmpresa => {\n  return api.get(`/reservasPreAprovadas/${nomeEmpresa}`);\n};\n\nconst mostrarTiposSeguro = nomeEmpresa => {\n  return api.get(`/seguros/${nomeEmpresa}`);\n};\n/**\t \r\n * Para\t realizar\t reservas,\t o\t\r\n * cliente\tdeverá fazer\tseu\tcadastro,\t\r\n * selecionar\tas\topções de\treserva,\ttipo\tde\tseguro\t\r\n * e\tperíodo de\tlocação.\r\n */\n\n\nconst reservarVeiculo = (path, data) => {\n  return api.post('/reservar', data);\n};\n/**\r\n * para\trealizar\ta\tdevolução do\tveiculo,\to\tresponsável \r\n * deverá entregá-lo\tnas\tmesmas condições de\trecebimento,\tque\tserão\r\n * avaliadas\t por\t uma\t vistoria\t aprovada\t pela\t \r\n * empresa\t com\t o\t uso\t de\t um\t checklist\tfornecido\tpelo\tsistema\r\n */\n\n\nconst entregarVeiculo = data => {\n  return api.post('/entregar', data);\n};\n/**\r\n * Se\to\tveiculo não\testiver\tnas\tcondições esperadas,\tele\tserá \r\n * enviado\tpara\tmanutenção e\tos\tcustos\tserão acrescidos\tao\tvalor\t\r\n * final\tda\tlocação.\tO\tveiculo somente\tserá\r\n * disponibilizado\tnovamente\tpara\tlocação após o\tseu\tretorno\t\r\n * à empresa\te\tas\tinformações decorrentes\tde\tuso,\tcomo\r\n * uilometragem,\tdeverão ser\tatualizadas.\r\n */\n\n\nconst EnviarParaManutencao = idVeiculo => {\n  return api.post('/paramanutencao', {\n    'id': idVeiculo\n  });\n};\n\n_c = EnviarParaManutencao;\n\nconst VerVeiculosDisponiveis = async _ => {\n  // return [\n  //     { 'nome': 'ford ka', 'disponibilidade': true, 'valor': 'R$ 100.00', 'categoria': 'Familiar' },\n  // ]\n  return [{\n    'veiculo': 'ford fiesta',\n    'disponibilidade': true,\n    'valor': 100,\n    'categoria': 'passeio'\n  }];\n  return api.get('/veiculos');\n};\n\n_c2 = VerVeiculosDisponiveis;\n\nconst getReservadoPorCliente = idCliente => {\n  return api.get(`reservas/cliente/${idCliente}`);\n};\n\nconst getVeiculosPorEmpresa = idEmpresa => {\n  return api.get(`empresa/veiculos/${idEmpresa}`);\n};\n\nconst getReservas = idEmpresa => {\n  return api.get(`reservas/cliente/${idEmpresa}`);\n};\n\nconst verLocacoes = nomeEmpresa => {\n  return api.get(`locacoes/${nomeEmpresa}`);\n};\n\nconst verReservas = nomeEmpresa => {\n  return api.get(`reservas/${nomeEmpresa}`);\n};\n\nconst verVeiculosNaManutencao = nomeEmpresa => {\n  return api.get(`manutencao_veiculos/${nomeEmpresa}`);\n};\n\nconst verFuncionarios = nomeEmpresa => {\n  return api.get(`funcionarios/${nomeEmpresa}`);\n};\n\nconst pagarFuncionario = (idFuncionario, salario) => {\n  return api.post(`pagar_funcionario/${idFuncionario}`, {\n    'pagamento': salario\n  });\n};\n\nconst documentosLocacao = (tipo_documento, data) => {\n  return api.get(`doc_locacao/${tipo_documento}`);\n};\n\nexport default {\n  registro,\n  login,\n  mostrarTiposSeguro,\n  VerVeiculosDisponiveis,\n  reservarVeiculo,\n  getReservadoPorCliente,\n  getVeiculosPorEmpresa,\n  getReservas,\n  verClientes,\n  mostrarReservasPreAprovadas,\n  aprovarRegistro,\n  entregarVeiculo,\n  EnviarParaManutencao,\n  aprovarReserva\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EnviarParaManutencao\");\n$RefreshReg$(_c2, \"VerVeiculosDisponiveis\");","map":{"version":3,"sources":["C:/Users/megam/Desktop/Veiculos-PWEB/src/services/apiService.js"],"names":["axios","api","create","baseURL","registro","path","data","post","login","user","get","then","response","status","forEach","item","catch","_","alert","verClientes","nomeEmpresa","aprovarRegistro","idCliente","aprovado","aprovarReserva","idReserva","mostrarReservasPreAprovadas","mostrarTiposSeguro","reservarVeiculo","entregarVeiculo","EnviarParaManutencao","idVeiculo","VerVeiculosDisponiveis","getReservadoPorCliente","getVeiculosPorEmpresa","idEmpresa","getReservas","verLocacoes","verReservas","verVeiculosNaManutencao","verFuncionarios","pagarFuncionario","idFuncionario","salario","documentosLocacao","tipo_documento"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:8000'\r\n})\r\n\r\nconst registro = async (path, data) => {\r\n    return api.post(path, data)\r\n}\r\n\r\nconst login = async (data) => {\r\n    let user = {}\r\n    return api.get('/usuarios')\r\n        .then(response => {\r\n            if (response.status == 200) {\r\n                response.data.forEach(item => {\r\n                    if (item['email'] == data['email'] && item['password'] == data['password'])\r\n                        user = item\r\n                })\r\n            }\r\n        }).catch(_ => {\r\n            alert('falha')\r\n        })\r\n}\r\n\r\n/**\r\n * \r\n * Para\tefetuar\ta\tlocação,\to\tcliente\tdeverá ter\to\t\r\n * seu\tcadastro\tno\tsistema\taprovado\t\r\n * pelos\tcritérios estabelecidos\tpela\tempresa\r\n */\r\nconst verClientes = async nomeEmpresa => {\r\n    return api.get(`clientes/${nomeEmpresa}`)\r\n}\r\n\r\nconst aprovarRegistro = (idCliente, aprovado) => {\r\n    return api.post('/aprovar', {\r\n        'id': idCliente,\r\n        'aprovado': aprovado\r\n    })\r\n}\r\n\r\nconst aprovarReserva = (idReserva, status) => {\r\n    return api.post('/aprovarReserva', { 'id': idReserva, 'status': status })\r\n}\r\n\r\n/**\r\n *  * A\tlocação será\r\n * ́ efetuada\tapenas\tse\to\tfuncionário\r\n * possuir\tas\tpermissões de\tacesso\tao\tsistema.\r\n */\r\nconst mostrarReservasPreAprovadas = nomeEmpresa => {\r\n    return api.get(`/reservasPreAprovadas/${nomeEmpresa}`)\r\n}\r\n\r\nconst mostrarTiposSeguro = nomeEmpresa => {\r\n    return api.get(`/seguros/${nomeEmpresa}`)\r\n}\r\n\r\n/**\t \r\n * Para\t realizar\t reservas,\t o\t\r\n * cliente\tdeverá fazer\tseu\tcadastro,\t\r\n * selecionar\tas\topções de\treserva,\ttipo\tde\tseguro\t\r\n * e\tperíodo de\tlocação.\r\n */\r\nconst reservarVeiculo = (path, data) => {\r\n    return api.post('/reservar', data)\r\n}\r\n\r\n/**\r\n * para\trealizar\ta\tdevolução do\tveiculo,\to\tresponsável \r\n * deverá entregá-lo\tnas\tmesmas condições de\trecebimento,\tque\tserão\r\n * avaliadas\t por\t uma\t vistoria\t aprovada\t pela\t \r\n * empresa\t com\t o\t uso\t de\t um\t checklist\tfornecido\tpelo\tsistema\r\n */\r\nconst entregarVeiculo = data => {\r\n    return api.post('/entregar', data)\r\n}\r\n\r\n\r\n/**\r\n * Se\to\tveiculo não\testiver\tnas\tcondições esperadas,\tele\tserá \r\n * enviado\tpara\tmanutenção e\tos\tcustos\tserão acrescidos\tao\tvalor\t\r\n * final\tda\tlocação.\tO\tveiculo somente\tserá\r\n * disponibilizado\tnovamente\tpara\tlocação após o\tseu\tretorno\t\r\n * à empresa\te\tas\tinformações decorrentes\tde\tuso,\tcomo\r\n * uilometragem,\tdeverão ser\tatualizadas.\r\n */\r\nconst EnviarParaManutencao = idVeiculo => {\r\n    return api.post('/paramanutencao', { 'id': idVeiculo })\r\n}\r\n\r\nconst VerVeiculosDisponiveis = async _ => {\r\n    // return [\r\n    //     { 'nome': 'ford ka', 'disponibilidade': true, 'valor': 'R$ 100.00', 'categoria': 'Familiar' },\r\n    // ]\r\n    return [{ 'veiculo': 'ford fiesta', 'disponibilidade': true, 'valor': 100, 'categoria': 'passeio' }]\r\n    return api.get('/veiculos')\r\n}\r\n\r\nconst getReservadoPorCliente = idCliente => {\r\n    return api.get(`reservas/cliente/${idCliente}`)\r\n}\r\n\r\nconst getVeiculosPorEmpresa = idEmpresa => {\r\n    return api.get(`empresa/veiculos/${idEmpresa}`)\r\n}\r\n\r\nconst getReservas = idEmpresa => {\r\n    return api.get(`reservas/cliente/${idEmpresa}`)\r\n}\r\n\r\nconst verLocacoes = nomeEmpresa => {\r\n    return api.get(`locacoes/${nomeEmpresa}`)\r\n}\r\n\r\nconst verReservas = nomeEmpresa => {\r\n    return api.get(`reservas/${nomeEmpresa}`)\r\n}\r\n\r\nconst verVeiculosNaManutencao = nomeEmpresa => {\r\n    return api.get(`manutencao_veiculos/${nomeEmpresa}`)\r\n}\r\n\r\nconst verFuncionarios = nomeEmpresa => {\r\n    return api.get(`funcionarios/${nomeEmpresa}`)\r\n}\r\n\r\nconst pagarFuncionario = (idFuncionario, salario) => {\r\n    return api.post(`pagar_funcionario/${idFuncionario}`, {\r\n        'pagamento': salario\r\n    })\r\n}\r\n\r\nconst documentosLocacao = (tipo_documento, data) => {\r\n    return api.get(`doc_locacao/${tipo_documento}`)\r\n}\r\n\r\nexport default {\r\n    registro,\r\n    login,\r\n    mostrarTiposSeguro,\r\n    VerVeiculosDisponiveis,\r\n    reservarVeiculo,\r\n    getReservadoPorCliente,\r\n    getVeiculosPorEmpresa,\r\n    getReservas,\r\n    verClientes,\r\n    mostrarReservasPreAprovadas,\r\n    aprovarRegistro,\r\n    entregarVeiculo,\r\n    EnviarParaManutencao,\r\n    aprovarReserva\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}